# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
"""add_table_dashboard_role_and_add_perm_column_to_core_dashboard_model.py

Revision ID: 3cc28d3954e8
Revises: 8d49a37823bf
Create Date: 2019-03-05 11:56:56.047634

"""

# revision identifiers, used by Alembic.
revision = '3cc28d3954e8'
down_revision = '8d49a37823bf'

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # op.create_table('dashboard_role',
    # sa.Column('id', sa.Integer(), nullable=False),
    # sa.Column('role_id', sa.Integer(), nullable=True),
    # sa.Column('dashboard_id', sa.Integer(), nullable=True),
    # sa.ForeignKeyConstraint(['dashboard_id'], ['dashboards.id'], ),
    # sa.ForeignKeyConstraint(['role_id'], ['ab_role.id'], ),
    # sa.PrimaryKeyConstraint('id')
    # )

    op.add_column('dashboards', sa.Column('perm', sa.String(length=1500), nullable=True))
    
    # op.alter_column('datasources', 'cluster_name',
    #            existing_type=sa.VARCHAR(length=250),
    #            nullable=True)
    # op.create_foreign_key(None, 'datasources', 'ab_user', ['changed_by_fk'], ['id'])
    # op.alter_column('dbs', 'allow_csv_upload',
    #            existing_type=sa.BOOLEAN(),
    #            nullable=True,
    #            existing_server_default=sa.text('true'))
    # op.drop_constraint('slices_druid_datasource_id_fkey', 'slices', type_='foreignkey')
    # op.drop_constraint('slices_table_id_fkey', 'slices', type_='foreignkey')
    # op.drop_column('slices', 'table_id')
    # op.drop_column('slices', 'druid_datasource_id')
    # op.create_unique_constraint(None, 'sql_metrics', ['table_id', 'metric_name'])
    # op.create_unique_constraint(None, 'table_columns', ['table_id', 'column_name'])
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # op.drop_constraint(None, 'table_columns', type_='unique')
    # op.drop_constraint(None, 'sql_metrics', type_='unique')
    # op.add_column('slices', sa.Column('druid_datasource_id', sa.INTEGER(), autoincrement=False, nullable=True))
    # op.add_column('slices', sa.Column('table_id', sa.INTEGER(), autoincrement=False, nullable=True))
    # op.create_foreign_key('slices_table_id_fkey', 'slices', 'tables', ['table_id'], ['id'])
    # op.create_foreign_key('slices_druid_datasource_id_fkey', 'slices', 'datasources', ['druid_datasource_id'], ['id'])
    # op.alter_column('dbs', 'allow_csv_upload',
    #            existing_type=sa.BOOLEAN(),
    #            nullable=False,
    #            existing_server_default=sa.text('true'))
    # op.drop_constraint(None, 'datasources', type_='foreignkey')
    # op.alter_column('datasources', 'cluster_name',
    #            existing_type=sa.VARCHAR(length=250),
    #            nullable=False)
    op.drop_column('dashboards', 'perm')
    #op.drop_table('dashboard_role')
    # ### end Alembic commands ###
